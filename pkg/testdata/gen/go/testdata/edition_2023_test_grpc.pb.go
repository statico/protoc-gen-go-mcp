// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: testdata/edition_2023_test.proto

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TestServiceEdition2023_CreateItem_FullMethodName            = "/testdata.TestServiceEdition2023/CreateItem"
	TestServiceEdition2023_GetItem_FullMethodName               = "/testdata.TestServiceEdition2023/GetItem"
	TestServiceEdition2023_ProcessWellKnownTypes_FullMethodName = "/testdata.TestServiceEdition2023/ProcessWellKnownTypes"
)

// TestServiceEdition2023Client is the client API for TestServiceEdition2023 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TestServiceEdition2023 provides test operations using edition 2023 syntax
type TestServiceEdition2023Client interface {
	// CreateItem creates a new item
	CreateItem(ctx context.Context, in *CreateItemRequestEdition2023, opts ...grpc.CallOption) (*CreateItemResponseEdition2023, error)
	// GetItem retrieves an item by ID
	GetItem(ctx context.Context, in *GetItemRequestEdition2023, opts ...grpc.CallOption) (*GetItemResponseEdition2023, error)
	// Test well-known types handling
	ProcessWellKnownTypes(ctx context.Context, in *ProcessWellKnownTypesRequestEdition2023, opts ...grpc.CallOption) (*ProcessWellKnownTypesResponseEdition2023, error)
}

type testServiceEdition2023Client struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceEdition2023Client(cc grpc.ClientConnInterface) TestServiceEdition2023Client {
	return &testServiceEdition2023Client{cc}
}

func (c *testServiceEdition2023Client) CreateItem(ctx context.Context, in *CreateItemRequestEdition2023, opts ...grpc.CallOption) (*CreateItemResponseEdition2023, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResponseEdition2023)
	err := c.cc.Invoke(ctx, TestServiceEdition2023_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceEdition2023Client) GetItem(ctx context.Context, in *GetItemRequestEdition2023, opts ...grpc.CallOption) (*GetItemResponseEdition2023, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResponseEdition2023)
	err := c.cc.Invoke(ctx, TestServiceEdition2023_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceEdition2023Client) ProcessWellKnownTypes(ctx context.Context, in *ProcessWellKnownTypesRequestEdition2023, opts ...grpc.CallOption) (*ProcessWellKnownTypesResponseEdition2023, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessWellKnownTypesResponseEdition2023)
	err := c.cc.Invoke(ctx, TestServiceEdition2023_ProcessWellKnownTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceEdition2023Server is the server API for TestServiceEdition2023 service.
// All implementations must embed UnimplementedTestServiceEdition2023Server
// for forward compatibility.
//
// TestServiceEdition2023 provides test operations using edition 2023 syntax
type TestServiceEdition2023Server interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *CreateItemRequestEdition2023) (*CreateItemResponseEdition2023, error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *GetItemRequestEdition2023) (*GetItemResponseEdition2023, error)
	// Test well-known types handling
	ProcessWellKnownTypes(context.Context, *ProcessWellKnownTypesRequestEdition2023) (*ProcessWellKnownTypesResponseEdition2023, error)
	mustEmbedUnimplementedTestServiceEdition2023Server()
}

// UnimplementedTestServiceEdition2023Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServiceEdition2023Server struct{}

func (UnimplementedTestServiceEdition2023Server) CreateItem(context.Context, *CreateItemRequestEdition2023) (*CreateItemResponseEdition2023, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedTestServiceEdition2023Server) GetItem(context.Context, *GetItemRequestEdition2023) (*GetItemResponseEdition2023, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedTestServiceEdition2023Server) ProcessWellKnownTypes(context.Context, *ProcessWellKnownTypesRequestEdition2023) (*ProcessWellKnownTypesResponseEdition2023, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWellKnownTypes not implemented")
}
func (UnimplementedTestServiceEdition2023Server) mustEmbedUnimplementedTestServiceEdition2023Server() {
}
func (UnimplementedTestServiceEdition2023Server) testEmbeddedByValue() {}

// UnsafeTestServiceEdition2023Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceEdition2023Server will
// result in compilation errors.
type UnsafeTestServiceEdition2023Server interface {
	mustEmbedUnimplementedTestServiceEdition2023Server()
}

func RegisterTestServiceEdition2023Server(s grpc.ServiceRegistrar, srv TestServiceEdition2023Server) {
	// If the following call pancis, it indicates UnimplementedTestServiceEdition2023Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TestServiceEdition2023_ServiceDesc, srv)
}

func _TestServiceEdition2023_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequestEdition2023)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceEdition2023Server).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestServiceEdition2023_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceEdition2023Server).CreateItem(ctx, req.(*CreateItemRequestEdition2023))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServiceEdition2023_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequestEdition2023)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceEdition2023Server).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestServiceEdition2023_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceEdition2023Server).GetItem(ctx, req.(*GetItemRequestEdition2023))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServiceEdition2023_ProcessWellKnownTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessWellKnownTypesRequestEdition2023)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceEdition2023Server).ProcessWellKnownTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestServiceEdition2023_ProcessWellKnownTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceEdition2023Server).ProcessWellKnownTypes(ctx, req.(*ProcessWellKnownTypesRequestEdition2023))
	}
	return interceptor(ctx, in, info, handler)
}

// TestServiceEdition2023_ServiceDesc is the grpc.ServiceDesc for TestServiceEdition2023 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestServiceEdition2023_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.TestServiceEdition2023",
	HandlerType: (*TestServiceEdition2023Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _TestServiceEdition2023_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _TestServiceEdition2023_GetItem_Handler,
		},
		{
			MethodName: "ProcessWellKnownTypes",
			Handler:    _TestServiceEdition2023_ProcessWellKnownTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/edition_2023_test.proto",
}
