// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: testdata/another_service.proto

package testdataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	testdata "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/testdata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnotherServiceName is the fully-qualified name of the AnotherService service.
	AnotherServiceName = "testdata.AnotherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnotherServiceDoSomethingProcedure is the fully-qualified name of the AnotherService's
	// DoSomething RPC.
	AnotherServiceDoSomethingProcedure = "/testdata.AnotherService/DoSomething"
)

// AnotherServiceClient is a client for the testdata.AnotherService service.
type AnotherServiceClient interface {
	// DoSomething is a test operation
	DoSomething(context.Context, *connect.Request[testdata.DoSomethingRequest]) (*connect.Response[testdata.DoSomethingResponse], error)
}

// NewAnotherServiceClient constructs a client for the testdata.AnotherService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnotherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnotherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	anotherServiceMethods := testdata.File_testdata_another_service_proto.Services().ByName("AnotherService").Methods()
	return &anotherServiceClient{
		doSomething: connect.NewClient[testdata.DoSomethingRequest, testdata.DoSomethingResponse](
			httpClient,
			baseURL+AnotherServiceDoSomethingProcedure,
			connect.WithSchema(anotherServiceMethods.ByName("DoSomething")),
			connect.WithClientOptions(opts...),
		),
	}
}

// anotherServiceClient implements AnotherServiceClient.
type anotherServiceClient struct {
	doSomething *connect.Client[testdata.DoSomethingRequest, testdata.DoSomethingResponse]
}

// DoSomething calls testdata.AnotherService.DoSomething.
func (c *anotherServiceClient) DoSomething(ctx context.Context, req *connect.Request[testdata.DoSomethingRequest]) (*connect.Response[testdata.DoSomethingResponse], error) {
	return c.doSomething.CallUnary(ctx, req)
}

// AnotherServiceHandler is an implementation of the testdata.AnotherService service.
type AnotherServiceHandler interface {
	// DoSomething is a test operation
	DoSomething(context.Context, *connect.Request[testdata.DoSomethingRequest]) (*connect.Response[testdata.DoSomethingResponse], error)
}

// NewAnotherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnotherServiceHandler(svc AnotherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	anotherServiceMethods := testdata.File_testdata_another_service_proto.Services().ByName("AnotherService").Methods()
	anotherServiceDoSomethingHandler := connect.NewUnaryHandler(
		AnotherServiceDoSomethingProcedure,
		svc.DoSomething,
		connect.WithSchema(anotherServiceMethods.ByName("DoSomething")),
		connect.WithHandlerOptions(opts...),
	)
	return "/testdata.AnotherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnotherServiceDoSomethingProcedure:
			anotherServiceDoSomethingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnotherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnotherServiceHandler struct{}

func (UnimplementedAnotherServiceHandler) DoSomething(context.Context, *connect.Request[testdata.DoSomethingRequest]) (*connect.Response[testdata.DoSomethingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.AnotherService.DoSomething is not implemented"))
}
