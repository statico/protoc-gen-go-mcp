// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: testdata/edition_2023_test.proto

package testdataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	testdata "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/testdata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TestServiceEdition2023Name is the fully-qualified name of the TestServiceEdition2023 service.
	TestServiceEdition2023Name = "testdata.TestServiceEdition2023"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceEdition2023CreateItemProcedure is the fully-qualified name of the
	// TestServiceEdition2023's CreateItem RPC.
	TestServiceEdition2023CreateItemProcedure = "/testdata.TestServiceEdition2023/CreateItem"
	// TestServiceEdition2023GetItemProcedure is the fully-qualified name of the
	// TestServiceEdition2023's GetItem RPC.
	TestServiceEdition2023GetItemProcedure = "/testdata.TestServiceEdition2023/GetItem"
	// TestServiceEdition2023ProcessWellKnownTypesProcedure is the fully-qualified name of the
	// TestServiceEdition2023's ProcessWellKnownTypes RPC.
	TestServiceEdition2023ProcessWellKnownTypesProcedure = "/testdata.TestServiceEdition2023/ProcessWellKnownTypes"
)

// TestServiceEdition2023Client is a client for the testdata.TestServiceEdition2023 service.
type TestServiceEdition2023Client interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *connect.Request[testdata.CreateItemRequestEdition2023]) (*connect.Response[testdata.CreateItemResponseEdition2023], error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *connect.Request[testdata.GetItemRequestEdition2023]) (*connect.Response[testdata.GetItemResponseEdition2023], error)
	// Test well-known types handling
	ProcessWellKnownTypes(context.Context, *connect.Request[testdata.ProcessWellKnownTypesRequestEdition2023]) (*connect.Response[testdata.ProcessWellKnownTypesResponseEdition2023], error)
}

// NewTestServiceEdition2023Client constructs a client for the testdata.TestServiceEdition2023
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceEdition2023Client(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestServiceEdition2023Client {
	baseURL = strings.TrimRight(baseURL, "/")
	testServiceEdition2023Methods := testdata.File_testdata_edition_2023_test_proto.Services().ByName("TestServiceEdition2023").Methods()
	return &testServiceEdition2023Client{
		createItem: connect.NewClient[testdata.CreateItemRequestEdition2023, testdata.CreateItemResponseEdition2023](
			httpClient,
			baseURL+TestServiceEdition2023CreateItemProcedure,
			connect.WithSchema(testServiceEdition2023Methods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[testdata.GetItemRequestEdition2023, testdata.GetItemResponseEdition2023](
			httpClient,
			baseURL+TestServiceEdition2023GetItemProcedure,
			connect.WithSchema(testServiceEdition2023Methods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
		processWellKnownTypes: connect.NewClient[testdata.ProcessWellKnownTypesRequestEdition2023, testdata.ProcessWellKnownTypesResponseEdition2023](
			httpClient,
			baseURL+TestServiceEdition2023ProcessWellKnownTypesProcedure,
			connect.WithSchema(testServiceEdition2023Methods.ByName("ProcessWellKnownTypes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// testServiceEdition2023Client implements TestServiceEdition2023Client.
type testServiceEdition2023Client struct {
	createItem            *connect.Client[testdata.CreateItemRequestEdition2023, testdata.CreateItemResponseEdition2023]
	getItem               *connect.Client[testdata.GetItemRequestEdition2023, testdata.GetItemResponseEdition2023]
	processWellKnownTypes *connect.Client[testdata.ProcessWellKnownTypesRequestEdition2023, testdata.ProcessWellKnownTypesResponseEdition2023]
}

// CreateItem calls testdata.TestServiceEdition2023.CreateItem.
func (c *testServiceEdition2023Client) CreateItem(ctx context.Context, req *connect.Request[testdata.CreateItemRequestEdition2023]) (*connect.Response[testdata.CreateItemResponseEdition2023], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls testdata.TestServiceEdition2023.GetItem.
func (c *testServiceEdition2023Client) GetItem(ctx context.Context, req *connect.Request[testdata.GetItemRequestEdition2023]) (*connect.Response[testdata.GetItemResponseEdition2023], error) {
	return c.getItem.CallUnary(ctx, req)
}

// ProcessWellKnownTypes calls testdata.TestServiceEdition2023.ProcessWellKnownTypes.
func (c *testServiceEdition2023Client) ProcessWellKnownTypes(ctx context.Context, req *connect.Request[testdata.ProcessWellKnownTypesRequestEdition2023]) (*connect.Response[testdata.ProcessWellKnownTypesResponseEdition2023], error) {
	return c.processWellKnownTypes.CallUnary(ctx, req)
}

// TestServiceEdition2023Handler is an implementation of the testdata.TestServiceEdition2023
// service.
type TestServiceEdition2023Handler interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *connect.Request[testdata.CreateItemRequestEdition2023]) (*connect.Response[testdata.CreateItemResponseEdition2023], error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *connect.Request[testdata.GetItemRequestEdition2023]) (*connect.Response[testdata.GetItemResponseEdition2023], error)
	// Test well-known types handling
	ProcessWellKnownTypes(context.Context, *connect.Request[testdata.ProcessWellKnownTypesRequestEdition2023]) (*connect.Response[testdata.ProcessWellKnownTypesResponseEdition2023], error)
}

// NewTestServiceEdition2023Handler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestServiceEdition2023Handler(svc TestServiceEdition2023Handler, opts ...connect.HandlerOption) (string, http.Handler) {
	testServiceEdition2023Methods := testdata.File_testdata_edition_2023_test_proto.Services().ByName("TestServiceEdition2023").Methods()
	testServiceEdition2023CreateItemHandler := connect.NewUnaryHandler(
		TestServiceEdition2023CreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(testServiceEdition2023Methods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	testServiceEdition2023GetItemHandler := connect.NewUnaryHandler(
		TestServiceEdition2023GetItemProcedure,
		svc.GetItem,
		connect.WithSchema(testServiceEdition2023Methods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	testServiceEdition2023ProcessWellKnownTypesHandler := connect.NewUnaryHandler(
		TestServiceEdition2023ProcessWellKnownTypesProcedure,
		svc.ProcessWellKnownTypes,
		connect.WithSchema(testServiceEdition2023Methods.ByName("ProcessWellKnownTypes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/testdata.TestServiceEdition2023/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceEdition2023CreateItemProcedure:
			testServiceEdition2023CreateItemHandler.ServeHTTP(w, r)
		case TestServiceEdition2023GetItemProcedure:
			testServiceEdition2023GetItemHandler.ServeHTTP(w, r)
		case TestServiceEdition2023ProcessWellKnownTypesProcedure:
			testServiceEdition2023ProcessWellKnownTypesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceEdition2023Handler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceEdition2023Handler struct{}

func (UnimplementedTestServiceEdition2023Handler) CreateItem(context.Context, *connect.Request[testdata.CreateItemRequestEdition2023]) (*connect.Response[testdata.CreateItemResponseEdition2023], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.TestServiceEdition2023.CreateItem is not implemented"))
}

func (UnimplementedTestServiceEdition2023Handler) GetItem(context.Context, *connect.Request[testdata.GetItemRequestEdition2023]) (*connect.Response[testdata.GetItemResponseEdition2023], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.TestServiceEdition2023.GetItem is not implemented"))
}

func (UnimplementedTestServiceEdition2023Handler) ProcessWellKnownTypes(context.Context, *connect.Request[testdata.ProcessWellKnownTypesRequestEdition2023]) (*connect.Response[testdata.ProcessWellKnownTypesResponseEdition2023], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.TestServiceEdition2023.ProcessWellKnownTypes is not implemented"))
}
